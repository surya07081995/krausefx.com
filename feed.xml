<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://krausefx.github.io/krausefx.com//feed.xml" rel="self" type="application/atom+xml" /><link href="https://krausefx.github.io/krausefx.com//" rel="alternate" type="text/html" /><updated>2018-04-08T19:14:30+00:00</updated><id>https://krausefx.github.io/krausefx.com//</id><title type="html">Felix Krause</title><subtitle>Personal website and blog of Felix Krause</subtitle><entry><title type="html">Going nomad</title><link href="https://krausefx.github.io/krausefx.com//blog/going-nomad" rel="alternate" type="text/html" title="Going nomad" /><published>2018-03-24T00:00:00+00:00</published><updated>2018-03-24T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/going-nomad</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/going-nomad">&lt;div class=&quot;jekyll-twitter-plugin&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I got rid of all my stuff and live off only a suitcase - staying in Airbnbs to explore different areas üè°üöÄ excited to live nomad life &lt;a href=&quot;https://t.co/nWGf7AFKiZ&quot;&gt;pic.twitter.com/nWGf7AFKiZ&lt;/a&gt;&lt;/p&gt;&amp;mdash; Felix Krause (@KrauseFx) &lt;a href=&quot;https://twitter.com/KrauseFx/status/928718106876305408?ref_src=twsrc%5Etfw&quot;&gt;November 9, 2017&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;I moved to San Francisco summer 2015 to join Twitter. I lived in a furnished apartment for my first year, which I really enjoyed, as I didn‚Äôt have to buy all the essentials myself after moving across the globe into a new country.&lt;/p&gt;

&lt;p&gt;After my 1 year lease, I decided to do what ‚Äúgrown-ups‚Äù are supposed to do: get their own apartment, buy furniture, decorate the place, and make it your home. After living in my little studio for about 1.5 years, I noticed a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In 2017 I only spent about 200 nights in my apartment, causing me to still pay about 5 months worth of San Francisco rent without actually living there (the average monthly lease for a studio apartment is about $3,000 + utilities, resulting in about $15,000 of my after tax money being lost)&lt;/li&gt;
  &lt;li&gt;While I enjoy having my own space, I never invested enough time and effort into making it nice: Until the day I moved out after 18 months, I still didn‚Äôt have enough closets for all my things and I had my clothes piled up in some corner&lt;/li&gt;
  &lt;li&gt;I didn‚Äôt like being bound to one location in the city. In particular, in the common case of getting acquired by another company (#justSFthings), your commute changes, and you can‚Äôt just move around&lt;/li&gt;
  &lt;li&gt;I didn‚Äôt like the fact that I was always surrounded by the same places and things became routine. Same subway station, same spots you walk by every day, same views, same commute, etc. after a month it gets boring and I need a change.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/nomad/SF-Map.png&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;the-idea&quot;&gt;The idea&lt;/h2&gt;

&lt;p&gt;Ever since I first started reading &lt;a href=&quot;https://levels.io/&quot;&gt;@levelsio‚Äôs blog&lt;/a&gt; in 2014, about living out of &lt;a href=&quot;https://levels.io/carry-on-world-travel/&quot;&gt;just a backpack&lt;/a&gt;, and &lt;a href=&quot;https://levels.io/remote-working-is-the-future/&quot;&gt;traveling across the world, while working on his own startups&lt;/a&gt;, I was fascinated by the idea. However I always assumed it doesn‚Äôt work if you have a full-time job at a large company like Twitter or Google.&lt;/p&gt;

&lt;p&gt;2014 was also the time I met &lt;a href=&quot;https://twitter.com/orta&quot;&gt;@orta&lt;/a&gt;, who told me about his first year in New York City, where he lived in a different neighborhood in a random Airbnb each month. This allowed him to see what NYC has to offer, and what area he liked the most. I loved the idea, and kind of knew I want to do this at some point in life.&lt;/p&gt;

&lt;p&gt;Only in October 2017 I realized that combining those two things might actually just work.&lt;/p&gt;

&lt;h2 id=&quot;making-the-move&quot;&gt;Making the move&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/nomad/suitcases.jpg&quot; width=&quot;240&quot; align=&quot;right&quot; style=&quot;margin-left: 20px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After living in San Francisco for 2.5 years, I wanted a change. With my lease ending in October, I decided to reduce my life to just&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 suitcase&lt;/li&gt;
  &lt;li&gt;1 carry-on luggage&lt;/li&gt;
  &lt;li&gt;1 backpack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and lived in an Airbnb in San Francisco until the winter holidays, for which I went back home to Austria. I got really lucky with my SF Airbnb, as I got it from &lt;a href=&quot;https://zeusliving.com/&quot;&gt;Zeus Living&lt;/a&gt; a company that rents out apartments for people like me: rent a place per month, all utilities included, and enough space with a desk to get work done.&lt;/p&gt;

&lt;p&gt;For the last 6 months I‚Äôve lived the nomad life, with just the things listed above. So far I‚Äôve stayed in 6 different neighborhoods in NYC, 2 areas in SF and spent time with my family in Austria for New Year‚Äôs. While I plan flights ahead of time due to costs, I don‚Äôt book places longer than a month ahead, something that took some time getting used to.&lt;/p&gt;

&lt;h2 id=&quot;spending-time-in-a-single-city&quot;&gt;Spending time in a single city&lt;/h2&gt;

&lt;p&gt;While being a different city each month might sound like a dream to many people, I learned it comes with many downsides:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It‚Äôs hard to build up a social circle of close friends&lt;/li&gt;
  &lt;li&gt;It‚Äôs hard to really get to know a city, and make use of all the things it has to offer&lt;/li&gt;
  &lt;li&gt;It‚Äôs hard to learn more about the culture&lt;/li&gt;
  &lt;li&gt;Cities change with seasons, a summer is usually quite different than a winter&lt;/li&gt;
  &lt;li&gt;It‚Äôs stressful changing cities too often&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Last year I &lt;a href=&quot;https://github.com/krausefx/speaking&quot;&gt;spoke at conferences in 9 cities&lt;/a&gt;. I knew I wanted to fly less in 2018.&lt;/p&gt;

&lt;p&gt;In January 2018, we started the new &lt;a href=&quot;https://github.com/fastlane/ci&quot;&gt;fastlane.ci project&lt;/a&gt;, which requires us to work closer with other Google teams, that are partially based in New York. I used that opportunity to ‚Äúmove‚Äù to NYC. So while I move to a different Airbnb every week, I do so within the same city. I grew up in a village with a population of less than 2,000, with not a single traffic light. Living in New York has been an amazing experience, with almost as many people living here, as in the whole country of Austria.&lt;/p&gt;

&lt;p&gt;For now, this seems like the perfect balance for me personally: Not getting bored by day to day routine (e.g. same commute) by moving to a new Airbnb every week, but also being able to hang out with the same friends, and get to know the whole city. Long term, I‚Äôll switch to a monthly cycle for even less overhead.&lt;/p&gt;

&lt;h2 id=&quot;frequently-asked-questions&quot;&gt;Frequently asked questions&lt;/h2&gt;

&lt;h3 id=&quot;how-do-you-handle-physical-mail&quot;&gt;How do you handle physical mail?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Online orders&lt;/strong&gt;: I‚Äôm lucky that I can use the Google office to order from Amazon, and pick them up at the end of the work day. It‚Äôs offered in most major cities, and even allows me to order something for a specific location. For example: When I flew to Amsterdam I ordered an umbrella to the office, ready for me to pick up.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Letters&lt;/strong&gt;: I use the &lt;a href=&quot;https://www.virtualpostmail.com/&quot;&gt;VirtualPostMail&lt;/a&gt; service. They scan your letters, and sends them to you via email. If you need the original, you can tell them to forward them to your current address (or office in my case)&lt;/p&gt;

&lt;h3 id=&quot;money&quot;&gt;Money&lt;/h3&gt;

&lt;p&gt;My first thought was: Staying in Airbnbs must be more expensive than having my own place! For multiple reasons:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Short term leases have to charge more to account for the vacant nights&lt;/li&gt;
  &lt;li&gt;Airbnbs are furnished, and include some basic services and utilities&lt;/li&gt;
  &lt;li&gt;Airbnb charges a pretty hefty fee for each booking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Circling back to the number of days I‚Äôm &lt;strong&gt;not&lt;/strong&gt; at home for about 5 months each year, I realized that I don‚Äôt pay my (SF/NYC) rent when:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I speak at a conference, and the organizers cover the hotel costs&lt;/li&gt;
  &lt;li&gt;I go on vacation&lt;/li&gt;
  &lt;li&gt;I go back home&lt;/li&gt;
  &lt;li&gt;I crash on a friend‚Äôs couch / extra bed&lt;/li&gt;
  &lt;li&gt;Google plans a team-offsite in a different location and covers the accommodation&lt;/li&gt;
  &lt;li&gt;I take a &lt;a href=&quot;https://en.wikipedia.org/wiki/Red-eye_flight&quot;&gt;red eye flight&lt;/a&gt; (a flight that leaves at about midnight, and lands in the morning)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Every night I don‚Äôt need to pay for my own place, I save about $100 after-tax money (NYC/SF)&lt;/p&gt;

&lt;h3 id=&quot;do-you-keep-any-physical-memories&quot;&gt;Do you keep any physical memories&lt;/h3&gt;

&lt;p&gt;You can either ask your parents nicely to keep your things, or you can rent storage somewhere to keep it. I decided to bring my things back home to Austria, by just having an extra bag with me the first time I flew back.&lt;/p&gt;

&lt;h3 id=&quot;how-did-you-get-rid-of-so-much-stuff&quot;&gt;How did you get rid of so much stuff?&lt;/h3&gt;

&lt;p&gt;I don‚Äôt care about physical things. If I were to lose all my devices, or all my clothes today, I‚Äôd buy new ones (probably the same ones). So getting rid of things was rather easy, and I personally never understood why it‚Äôs difficult, unless there are certain memories attached.&lt;/p&gt;

&lt;p&gt;All I did was: Do I really need this? If the answer wasn‚Äôt an immediate yes, it‚Äôs a no. If I wanted to keep the ‚Äúmemory‚Äù, I made sure to take a picture before giving it away.&lt;/p&gt;

&lt;p&gt;I created a spreadsheet with all the things I give away, and shared it with my friends on Facebook, from furniture, to kitchen stuff, to light bulbs, and I got ‚Äúrid‚Äù of everything, as 2 of my friends just moved to a new place, and needed almost everything. The remaining things I donated or threw away if it wasn‚Äôt usable any more.&lt;/p&gt;

&lt;p&gt;I went from&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/nomad/diff.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is tricky though to buy new stuff, since I need to get rid of something else, for every single new item I buy. While my suitcases still have some space left, the weight limit of 22kg of most airlines is what I have to be careful about.&lt;/p&gt;

&lt;h3 id=&quot;how-do-you-keep-things-organized&quot;&gt;How do you keep things organized?&lt;/h3&gt;

&lt;p&gt;Those &lt;a href=&quot;https://shop.eaglecreek.com/packit-cube-set/d/1322&quot;&gt;travel cubes&lt;/a&gt; have been pretty useful, I got a lot of them, for shirts, socks, underwear, electronics, etc. and can recommend them to anyone traveling.&lt;/p&gt;

&lt;h3 id=&quot;did-you-buy-any-travel-gear-for-this&quot;&gt;Did you buy any travel gear for this?&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/nomad/ordered.jpg&quot; align=&quot;right&quot; style=&quot;margin-left: 20px&quot; width=&quot;240&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, there are some really cool things out there, that made my life easier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bose.com/en_us/products/speakers/portable_speakers/soundlink-revolve-plus-bundle.html&quot;&gt;Portable Bose SoundLink Revolve+&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.therooststand.com&quot;&gt;Roost Stand&lt;/a&gt; (MacBook stand for ergonomic working wherever you are in combination with Bluetooth keyboard + trackpad)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://shop.eaglecreek.com/packit-cube-set/d/1322&quot;&gt;Travel cubes&lt;/a&gt; to keep things organized&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/gp/product/B00D5FGR2C/ref=oh_aui_detailpage_o01_s00?ie=UTF8&amp;amp;psc=1&quot;&gt;Travel scale&lt;/a&gt; (I‚Äôm into fitness, and started tracking my weight every morning)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;is-that-minimalism-life&quot;&gt;Is that ‚ÄúMinimalism Life‚Äù?&lt;/h3&gt;

&lt;p&gt;I‚Äôve read a bit about this topic, including &lt;a href=&quot;https://medium.com/@coolasspuppy/200-things-dfa3d5034cd7&quot;&gt;a great blog post of my friend about owning 200 things&lt;/a&gt;. I love the concept of owning just the things you really need, and forget the rest.&lt;/p&gt;

&lt;p&gt;I also watched the &lt;a href=&quot;https://www.netflix.com/title/80114460&quot;&gt;‚ÄúMinimalism‚Äù documentary on Netflix&lt;/a&gt;, which covers some of the concepts. Personally I don‚Äôt want to count things, or reduce life in areas I don‚Äôt want to. For example, I still carry around a rather high number of shoes with me, just because I like having the right shoes for the right occasion.&lt;/p&gt;

&lt;p&gt;I‚Äôd argue the goal is to live a normal day-to-day life, when going to work or hanging out with friends, while still being very flexible.&lt;/p&gt;

&lt;h3 id=&quot;security-concerns&quot;&gt;Security concerns&lt;/h3&gt;

&lt;p&gt;That‚Äôs something I‚Äôve been thinking more about recently: Breaking into an Airbnb is probably super easy, just stay in a place, copy the key and then steal from the next person, with the next person probably blaming the host or cleaning staff. Unfortunately it‚Äôs not common for Airbnbs to have a safe.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I generally don‚Äôt own anything of real value, besides my MacBook&lt;/li&gt;
  &lt;li&gt;I don‚Äôt leave anything valuable in my Airbnb but put them in the Google office instead&lt;/li&gt;
  &lt;li&gt;All of my documents are stored online&lt;/li&gt;
  &lt;li&gt;Hourly backups on different continents, using hard drives and custom cloud backup solutions, all end to end encrypted, on a total of 5 different locations&lt;/li&gt;
  &lt;li&gt;Even if I were to lose 100% of my things including all my devices, I have a clear recovery path where I can recover my complete online identity, documents and everything else within less than 24 hours. For security reasons I can‚Äôt share more about this specific topic, but I can recommend everyone to draw a map of dependencies between the services/software/hardware you use, and how you can recover them step by step.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-else-is-nice-about-not-having-a-fixed-lease&quot;&gt;What else is nice about not having a fixed lease?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;If you stay at a place for just a week, you‚Äôll never have to clean the apartment&lt;/li&gt;
  &lt;li&gt;You learn how other people live day to day, e.g. how they set up their rooms and get a good idea of what you enjoy&lt;/li&gt;
  &lt;li&gt;You learn more about yourself, like what things are important to you when it comes to having a living space&lt;/li&gt;
  &lt;li&gt;When you own a home, you have to deal with maintenance, repairs and other things quite often. When renting an apartment building, at least some things are being taken care of by the owners. If you stay in Airbnb, there is literally nothing you have to worry about, if something doesn‚Äôt work, you notify the host and that‚Äôs it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/nomad/taipei.jpg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I wrote this post in Taipei, Taiwan, where I work remotely from the Taipei Google office for 2 weeks before heading to San Francisco.&lt;/p&gt;

&lt;p&gt;Being able to escape the cold winter feels amazing üòé&lt;/p&gt;</content><author><name></name></author><category term="twitter" /><summary type="html">I got rid of all my stuff and live off only a suitcase - staying in Airbnbs to explore different areas üè°üöÄ excited to live nomad life pic.twitter.com/nWGf7AFKiZ&amp;mdash; Felix Krause (@KrauseFx) November 9, 2017</summary></entry><entry><title type="html">How I use Twitter</title><link href="https://krausefx.github.io/krausefx.com//blog/how-i-use-twitter" rel="alternate" type="text/html" title="How I use Twitter" /><published>2018-03-06T00:00:00+00:00</published><updated>2018-03-06T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/how-i-use-twitter</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/how-i-use-twitter">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;p&gt;For most people, using the official Twitter client works fine. It‚Äôs optimized to show you new content you might be interested in, makes it easy to follow new users, and shows content that might be most relevant to you first. If you have an engineering mindset, chances are you want to be in control of what you see in your timeline.&lt;/p&gt;

&lt;p&gt;I use Twitter to stay up to date with certain people. I want to hear about new projects or new content they published, new blog posts, thoughts of them, etc. I‚Äôm not interested in hearing political opinions, sport scores, etc, which I already have Facebook for. If I follow someone, I‚Äôll read every single tweet from them. For the last 5 years, I didn‚Äôt miss a tweet in my timeline, so I have to be very careful about who to follow, and what content to see. So I set out to customize Twitter to archive that goal, and to only see about 50-75 tweets per day.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;

&lt;p&gt;I‚Äôve been using &lt;a href=&quot;https://tapbots.com/tweetbot/&quot;&gt;Tweetbot&lt;/a&gt; for the last few years, the technique described below might work with other third party Twitter clients also.&lt;/p&gt;

&lt;h3 id=&quot;muted-keywords&quot;&gt;Muted Keywords&lt;/h3&gt;

&lt;p&gt;Very basic list of words, that as soon as a tweet contains one of them, it will be hidden, examples include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;headphone jack&lt;/li&gt;
  &lt;li&gt;drake&lt;/li&gt;
  &lt;li&gt;podcast&lt;/li&gt;
  &lt;li&gt;president&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;muted-users&quot;&gt;Muted users&lt;/h3&gt;

&lt;p&gt;I stopped using this feature, now that I use secret lists to follow people (see below), and disabled RTs. Muting users for a given time period or forever is useful for a few situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Some users in your timeline might promote a product, so you can mute that product&lt;/li&gt;
  &lt;li&gt;If a user is at a conference/event you‚Äôre not interested in, you can mute them for a few days&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;muted-regexes&quot;&gt;Muted Regexes&lt;/h3&gt;

&lt;p&gt;A very powerful feature of Tweetbot is to define a regex to hide tweet. I use it to hide annoying jokes like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;remember \w+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;german word for \w+&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;\w+ is the new \w+&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;or to hide tweets from people that think we‚Äôre interested about their airplane delays or #sports&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(virgin|Virgin|@United|delta|Delta|JetBlue|jetblue)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;twitter.com/i/moments&lt;/li&gt;
  &lt;li&gt;For every #sports #event there are also custom-made mute filters (truncated): &lt;code class=&quot;highlighter-rouge&quot;&gt;(?#World Cup)(?i)((?# Terms)(Brazil\s*2014|FIFA|World\s*Cup|Soccer|F(oo|u)tbal)|(?# Chants)(go a l |[^\w](ole\s*){2,})|(?# Teams)(#(B....&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hide-all-mentions&quot;&gt;Hide all mentions&lt;/h3&gt;

&lt;p&gt;This very much changed my whole timeline (for the better). Turns out, I follow people for their announcements, what they work on, what they‚Äôre doing, what they‚Äôre thinking about, etc. I actually don‚Äôt want to see 2 people communicating publicly using @ mentions, unless it‚Äôs a topic I‚Äôm interested in. So I started hiding all tweets that start with an &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; symbol using a simple Tweetbot regex&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^@&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If I want to see responses to a tweet, I‚Äôd swipe to the left side, and see all replies.&lt;/p&gt;

&lt;h3 id=&quot;muted-clients&quot;&gt;Muted Clients&lt;/h3&gt;

&lt;p&gt;Muting certain clients has been amazing, very easy to set up and cleans up your timeline a lot. Some of the clients I mute:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Buffer (to avoid ‚Äúcontent marketing‚Äù, so many companies make the mistake of tweeting the same posts every week or so using Buffer)&lt;/li&gt;
  &lt;li&gt;IFTTT (lots of people use that to auto-post not original content)&lt;/li&gt;
  &lt;li&gt;Spotify&lt;/li&gt;
  &lt;li&gt;Foursquare (I follow friends on Swarm already, no need to see it twice)&lt;/li&gt;
  &lt;li&gt;Facebook&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/tweetbot_filters.png&quot; width=&quot;220&quot; style=&quot;float: right; margin-left: 20px&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;secret-lists&quot;&gt;Secret Lists&lt;/h3&gt;

&lt;p&gt;One issue I had was to balance the number of tweets in my timeline, and then also being polite and following friends. To avoid the whole ‚ÄúWhy are you not following me?‚Äù conversation, I now use a private list to follow about 300 people only. I &lt;a href=&quot;https://github.com/krausefx/twitter-unfollow&quot;&gt;open sourced the script&lt;/a&gt; I used to migrate all the people I used to follow over to a private list.&lt;/p&gt;

&lt;h3 id=&quot;disable-rts&quot;&gt;Disable RTs&lt;/h3&gt;

&lt;p&gt;This has been a great change: As described above, I follow people for what they do, what they think of, and what they‚Äôre working on. Some people have the habit of RTing content that might be interesting, but not relevant to why I want to stay subscribed to their tweets. On Tweetbot, you can.&lt;/p&gt;

&lt;h3 id=&quot;muting-hashtags&quot;&gt;Muting hashtags&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/tweetbot_filters_2.png&quot; width=&quot;220&quot; style=&quot;float: right; margin-left: 20px; margin-top: 20px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I thank everyone for using hashtags for certain events, making it easy to hide them from my timeline :)&lt;/p&gt;

&lt;h3 id=&quot;disadvantages-of-this-approach&quot;&gt;Disadvantages of this approach&lt;/h3&gt;

&lt;p&gt;Some of the newer Twitter features don‚Äôt have an API, and therefore can‚Äôt be offered by Tweetbot. This includes Polls, Moments and Group DMs. Since I don‚Äôt want to miss group DMs, I set up email notifications for Twitter DMs, and set up a Gmail filter to auto-archive emails that are not from group DMs.&lt;/p&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;I‚Äôve spent quite some time optimizing that workflow, and it‚Äôs very specific, and probably not useful for most people. I try to minimize my time on social media, I only browse my Twitter feed when I have a few minutes to kill on the go. Meaning I work through my timeline only on my iPhone, and reply to mentions and DMs only on my Mac. I don‚Äôt want to come across uninterested, I do follow people on Facebook, I do read news and stay up to date. Twitter is a place for very specific content for me, and I want to keep using it as that.&lt;/p&gt;</content><author><name></name></author><category term="twitter" /><summary type="html">Background</summary></entry><entry><title type="html">follow.user - track the user‚Äôs website activities, steal their data &amp;amp; credentials and add your own ads to any website in your iOS app</title><link href="https://krausefx.github.io/krausefx.com//blog/follow-user" rel="alternate" type="text/html" title="follow.user - track the user's website activities, steal their data &amp; credentials and add your own ads to any website in your iOS app" /><published>2018-03-03T00:00:00+00:00</published><updated>2018-03-03T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/follow-user</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/follow-user">&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;div class=&quot;video&quot; style=&quot;float: right; margin-left: 20px&quot;&gt;
  &lt;figure&gt;
    &lt;iframe src=&quot;//www.youtube.com/embed/ZIogd0kv80c&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; width=&quot;170&quot; height=&quot;350&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;Most iOS apps need to show external web content at some point. Apple provided multiple ways for a developer to do so, the official ones are:&lt;/p&gt;

&lt;h3 id=&quot;launch-a-url-in-safari&quot;&gt;Launch a URL in Safari&lt;/h3&gt;

&lt;p&gt;This will use the app switcher to move your own app into the background. This way, the user has their own browser (Safari), with their session and content blocker, browser plugins (e.g. 1Password), etc. As launching Safari puts your app into the background, many app developers are worried the user doesn‚Äôt come back to them.&lt;/p&gt;

&lt;p&gt;Check out the first video to see how this looks in action ‚û°Ô∏è&lt;/p&gt;

&lt;h3 id=&quot;use-in-app-sfsafariviewcontroller&quot;&gt;Use in-app &lt;a href=&quot;https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller&quot;&gt;SFSafariViewController&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Many third party iOS apps use this approach (e.g. Tweetbot).&lt;/p&gt;
&lt;div class=&quot;video&quot; style=&quot;float: right; margin-left: 20px;&quot;&gt;
  &lt;figure&gt;
    &lt;iframe src=&quot;//www.youtube.com/embed/EPH5XGbigJU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot; width=&quot;170&quot; height=&quot;350&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;It allows an app developer to use the built-in Safari with all its features, without making the user leave your application. It features all the Safari features, but from within your application.&lt;/p&gt;

&lt;p&gt;Check out the second video to see how this looks in action ‚û°Ô∏è&lt;/p&gt;

&lt;h3 id=&quot;current-state-with-larger-social-network-apps&quot;&gt;Current state with larger social network apps&lt;/h3&gt;

&lt;p&gt;Many larger iOS apps re-implemented their own in-app web browser. While this was necessary many years ago, nowadays it‚Äôs not only not required any more, it actually adds a major risk to the end-user.&lt;/p&gt;

&lt;p&gt;Those custom in-app browsers usually use their own UI elements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Custom address bar&lt;/li&gt;
  &lt;li&gt;Custom SSL indicator&lt;/li&gt;
  &lt;li&gt;Custom share button&lt;/li&gt;
  &lt;li&gt;Custom reload button&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/browser/browser.png&quot; width=&quot;250&quot; style=&quot;float: right; margin-left: 30px&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;problems-with-custom-in-app-browsers&quot;&gt;Problems with custom in-app browsers&lt;/h2&gt;

&lt;p&gt;If an app renders their own &lt;a href=&quot;https://developer.apple.com/documentation/webkit/wkwebview&quot;&gt;WKWebView&lt;/a&gt;, they not only cause inconvenience for the user, but they actually put them at serious risk.&lt;/p&gt;

&lt;h3 id=&quot;convenience&quot;&gt;Convenience&lt;/h3&gt;

&lt;h4 id=&quot;user-session&quot;&gt;User session&lt;/h4&gt;

&lt;p&gt;The user‚Äôs login session isn‚Äôt available, meaning if you get a link to e.g. an Amazon product, you now have to login and enter your 2-factor authentication code to purchase a product.&lt;/p&gt;

&lt;h4 id=&quot;browser-extensions&quot;&gt;Browser extensions&lt;/h4&gt;

&lt;p&gt;If the user has browser extensions (like password managers), they won‚Äôt have access to them in a custom in-app browser.&lt;/p&gt;

&lt;h4 id=&quot;deep-linking&quot;&gt;Deep linking&lt;/h4&gt;

&lt;p&gt;Deep linking itself has multiple open issues on the iOS platform. By using a custom in-app browser, it adds an extra layer that doesn‚Äôt work well with deep linking. Instead of opening the Amazon app when tapping on an Amazon link in ‚ÄúSocial Media App X‚Äù, it opens the product in a plain web-view, with no login session, and no way to open the product in the app.&lt;/p&gt;

&lt;h4 id=&quot;content-blockers&quot;&gt;Content blockers&lt;/h4&gt;

&lt;p&gt;If the user has content blockers installed, they‚Äôre not being used by custom in-app browsers.&lt;/p&gt;

&lt;h4 id=&quot;bookmarks&quot;&gt;Bookmarks&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/browser/browser-dialog.png&quot; width=&quot;250&quot; style=&quot;float: right; margin-left: 30px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is no way for the user to store the current URL in their bookmarks.&lt;/p&gt;

&lt;h4 id=&quot;share-a-website&quot;&gt;Share a website&lt;/h4&gt;

&lt;p&gt;Apps use this opportunity to force their users to use whatever ‚Äúsocial features‚Äù they think are useful to them. Usually that means locking the user into their ecosystem, and not allowing people to share the content on the platform of their choice. There should be an explicit App Store rule against this.&lt;/p&gt;

&lt;h3 id=&quot;security--privacy&quot;&gt;Security &amp;amp; Privacy&lt;/h3&gt;

&lt;p&gt;Using a custom in-app browser, allows the app developer to inject &lt;strong&gt;ANY&lt;/strong&gt; JavaScript code into the website the user visits. This means, any content, any data and any input that is shown or stored on the website is accessible to the app.&lt;/p&gt;

&lt;h4 id=&quot;analytics&quot;&gt;Analytics&lt;/h4&gt;

&lt;p&gt;This is basically the main reason why in-app browsers are still a thing: It allows the app maintainer to inject additional analytics code, without telling the user. This way, the app‚Äôs developer can track the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How long does the user visit the linked website?&lt;/li&gt;
  &lt;li&gt;How fast does the user scroll?&lt;/li&gt;
  &lt;li&gt;Which links does the user open, and how long do they stay on each of them?&lt;/li&gt;
  &lt;li&gt;Combined with &lt;a href=&quot;https://krausefx.com/blog/ios-privacy-watchuser-access-both-iphone-cameras-any-time-your-app-is-running&quot;&gt;watch.user&lt;/a&gt;, the app can record you while you browse third party websites, or even use the iPhone X face sensor to parse your face&lt;/li&gt;
  &lt;li&gt;Every single tap, swipe or any other gesture&lt;/li&gt;
  &lt;li&gt;Device movements, GPS location (if granted) and any other granted iOS sensor, while the app is still in the foreground.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;user-credentials&quot;&gt;User credentials&lt;/h4&gt;

&lt;p&gt;Any app with an in-app browser can easily steal the user‚Äôs email address, passwords and two-factor authentication codes. They can do that by injecting JavaScript code that bridges the data over to the app, or directly to a remote host. This is simple, it‚Äôs basically code like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That‚Äôs all that‚Äôs needed: just inject the code above to every website, run it on every user‚Äôs key stroke, and you‚Äôll get a nice list of email addresses and passwords.&lt;/p&gt;

&lt;p&gt;To run JavaScript in your own web view, you can just use&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;document.getElementById('password').value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;evaluateJavaScript&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:script&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;completionHandler&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NSError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;user-data&quot;&gt;User data&lt;/h4&gt;

&lt;p&gt;Once the user is logged in, you also get access to the full HTML DOM + JavaScript data &amp;amp; events, which means you have full access to whatever the user sees. This includes things like your emails, your Amazon order history, your friend list, or whatever other data/website you access from an in-app web view.&lt;/p&gt;

&lt;h4 id=&quot;https&quot;&gt;HTTPs&lt;/h4&gt;

&lt;p&gt;Usually the web browser has a standardised way of indicating the SSL certificate next to the browser‚Äôs URL. In the case of custom in-app browsers, the SSL logo is being added by the app‚Äôs author, meaning you trust the app‚Äôs maintainer to only show the logo if it‚Äôs actually a valid SSL certificate.&lt;/p&gt;

&lt;h4 id=&quot;ads&quot;&gt;Ads&lt;/h4&gt;

&lt;p&gt;Custom in-app browsers allow all app developers to inject their own ad system into any website that‚Äôs shown as part of their app. But not only that, they can &lt;strong&gt;replace&lt;/strong&gt; the ads identifier of ads that are already shown on the website, so that the revenue goes directly to them, instead of the website owner.&lt;/p&gt;

&lt;h4 id=&quot;and-more&quot;&gt;And more&lt;/h4&gt;

&lt;p&gt;These are just some of the things that immediately come to my mind, every time I use an in-app browser, there are probably a lot more evil things a company &lt;a href=&quot;https://krausefx.com/blog/trusting-sdks&quot;&gt;or SDK&lt;/a&gt; could be doing.&lt;/p&gt;

&lt;h3 id=&quot;how-can-we-solve-this&quot;&gt;How can we solve this?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Reject apps that don‚Äôt use &lt;a href=&quot;https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller&quot;&gt;SFSafariViewController&lt;/a&gt; or launch Safari directly to show third party website content&lt;/li&gt;
  &lt;li&gt;There should be exceptions, e.g. if a webview is used to show parts of the UI, or dynamic content, but it should be illegal to use webviews to show a linked or third party website&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I also &lt;a href=&quot;https://openradar.appspot.com/radar?id=4963695432040448&quot;&gt;filed a radar for this issue&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><category term="security" /><category term="privacy" /><category term="sdks" /><summary type="html">Background</summary></entry><entry><title type="html">Trusting third party SDKs</title><link href="https://krausefx.github.io/krausefx.com//blog/trusting-sdks" rel="alternate" type="text/html" title="Trusting third party SDKs" /><published>2018-02-15T00:00:00+00:00</published><updated>2018-02-15T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/trusting-sdks</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/trusting-sdks">&lt;p&gt;Third-party SDKs can often easily be &lt;strong&gt;modified&lt;/strong&gt; while you download them! Using a simple &lt;a href=&quot;https://wikipedia.org/wiki/Man_in_the_middle_attack&quot;&gt;person-in-the-middle attack&lt;/a&gt;, anyone in the same network can insert malicious code into the library, and with that into your application, as a result running in your user‚Äôs pockets.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;31%&lt;/strong&gt; of the most popular closed-source iOS SDKs are vulnerable to this attack, as well as a total of &lt;strong&gt;623 libraries&lt;/strong&gt; on CocoaPods. As part of this research I notified the affected parties, and submitted patches to CocoaPods to warn developers and SDK providers.&lt;/p&gt;

&lt;h2 id=&quot;what-are-the-potential-consequences-of-a-modified-sdk&quot;&gt;What are the potential consequences of a modified SDK?&lt;/h2&gt;

&lt;p&gt;It‚Äôs extremely dangerous if someone modifies an SDK before you install it. You are shipping your app with that code/binary. It will run on thousands or millions of devices within a few days, and everything you ship within your app runs with the &lt;strong&gt;exact&lt;/strong&gt; same privileges as your app.&lt;/p&gt;

&lt;p&gt;That means any SDK you include in your app has access to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The same keychain your app has access to&lt;/li&gt;
  &lt;li&gt;Any folders/files your app has access to&lt;/li&gt;
  &lt;li&gt;Any app permissions your app has, e.g. location data, photo library access&lt;/li&gt;
  &lt;li&gt;iCloud containers of your app&lt;/li&gt;
  &lt;li&gt;All data your app exchanges with a web server, e.g. user logins, personal information&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple enforces iOS app sandboxing for good reasons, so don‚Äôt forget that &lt;strong&gt;any SDK you include in your app runs inside your app‚Äôs sandbox&lt;/strong&gt;, and has access to everything your app has access to.&lt;/p&gt;

&lt;p&gt;What‚Äôs the worst that a malicious SDK could do?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Steal sensitive user data, basically add a keylogger for your app, and record every tap&lt;/li&gt;
  &lt;li&gt;Steal keys and user‚Äôs credentials&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://krausefx.com/blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access&quot;&gt;Access the user‚Äôs historic location data and sell it to third parties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://krausefx.com/blog/ios-privacy-stealpassword-easily-get-the-users-apple-id-password-just-by-asking&quot;&gt;Show phishing pop-ups for iCloud, or other login credentials&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://krausefx.com/blog/ios-privacy-watchuser-access-both-iphone-cameras-any-time-your-app-is-running&quot;&gt;Take pictures in the background without telling the user&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The attack described here shows how an attacker can use &lt;strong&gt;your mobile app&lt;/strong&gt; to steal sensitive user data.&lt;/p&gt;

&lt;h2 id=&quot;web-security-101&quot;&gt;Web Security 101&lt;/h2&gt;

&lt;p&gt;To understand how malicious code can be bundled into your app without your permission or awareness, I will provide necessary background to understanding how a &lt;a href=&quot;https://wikipedia.org/wiki/Man_in_the_middle_attack&quot;&gt;MITM attack&lt;/a&gt; works and how to avoid it.&lt;/p&gt;

&lt;p&gt;The information below is vastly simplified, as I try to describe things in a way that a mobile developer without too much network knowledge can get a sense of how things work and how they can protect themselves.&lt;/p&gt;

&lt;h3 id=&quot;https-vs-http&quot;&gt;HTTPs vs HTTP&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;HTTP&lt;/strong&gt;: Unencrypted traffic, anybody in the same network (WiFi or Ethernet) can easily listen to the packets. It‚Äôs very straightforward to do on unencrypted WiFi networks, but it‚Äôs actually almost as easy to do so on a protected WiFi or Ethernet network. There is no way for your computer to verify the packets came from the host you requested data from; Other computers can receive packets before you, open and modify them and send the modified version to you.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;HTTPs&lt;/strong&gt;: With HTTPs traffic other hosts in the network can still listen to your packets, but can‚Äôt open them. They still get some basic metadata like the host name, but no details (like the body, full URL, ‚Ä¶). Additionally your client also verifies that the packets came from the original host and that no one on the way there modified the content. HTTPs is based on TLS.&lt;/p&gt;

&lt;h3 id=&quot;how-a-browser-switches-from-http-to-https&quot;&gt;How a browser switches from HTTP to HTTPS&lt;/h3&gt;

&lt;p&gt;Enter ‚Äú&lt;a href=&quot;http://google.com&quot;&gt;http://google.com&lt;/a&gt;‚Äù in your web browser (make sure to use ‚Äúhttp‚Äù, not ‚Äúhttps‚Äù). You‚Äôll see how the browser automatically switches from the unsafe ‚Äúhttp‚Äù protocol to ‚Äúhttps‚Äù.&lt;/p&gt;

&lt;p&gt;This switch doesn‚Äôt happen in your browser but comes from the remote server (google.com), as your client (in this case the browser) can‚Äôt know what kind of protocol is supported by the host. (Exception for hosts that make use of &lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security&quot;&gt;HSTS&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_0.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The initial request happens via ‚Äúhttp‚Äù, so the server has no choice but to respond in clear text ‚Äúhttp‚Äù to tell the client to switch over to the secure ‚Äúhttps‚Äù protocol with a ‚Äú301 Moved Permanently‚Äù response code.&lt;/p&gt;

&lt;p&gt;You probably already see the problem here: since the response is being sent in clear text also, an attacker can modify that particular packet and replace the redirect destination URL to stay unencrypted ‚Äúhttp‚Äù. This is called SSL Stripping, and we‚Äôll talk more about this later.&lt;/p&gt;

&lt;h3 id=&quot;how-network-requests-work&quot;&gt;How network requests work&lt;/h3&gt;

&lt;p&gt;Very simplified, network requests work on multiple layers. Depending on the layer, different information is available on how to route a packet:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The lowest layer (Data Link Layer) uses MAC addresses to identify hosts in a network&lt;/li&gt;
  &lt;li&gt;The layer above (Network Layer) uses IP addresses to identify hosts in the network&lt;/li&gt;
  &lt;li&gt;The layers above add port information and the actual message content&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you‚Äôre interested, you can learn how the OSI (Open Systems Interconnection) model works, in particular the implementation TCP/IP (e.g. &lt;a href=&quot;http://microchipdeveloper.com/tcpip:tcp-ip-five-layer-model&quot;&gt;http://microchipdeveloper.com/tcpip:tcp-ip-five-layer-model&lt;/a&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if your computer now sends a packet to the router, how does the router know where to route the packet based on the first layer (MAC addresses)? To solve this problem, the router uses a protocol called ARP (Address Resolution Protocol).&lt;/p&gt;

&lt;h3 id=&quot;how-arp-works-and-how-it-can-be-abused&quot;&gt;How ARP works and how it can be abused&lt;/h3&gt;

&lt;p&gt;Simplified, the devices in a network use ARP mapping to remember where to send packets of a certain MAC address. The way ARP works is simple: if a device wants to know where to send a packet for a certain IP address, it asks everyone in the network: ‚ÄúWhich MAC address belongs to this IP?‚Äù. The device with that IP then replies to this message ‚úã&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/posts/trusting-sdks/image_1.png&quot; width=&quot;500&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Unfortunately, there is no way for a device to authenticate the sender of an ARP message. Therefore an attacker can be fast in responding to ARP announcements sent by another device, basically saying: ‚ÄúHey, please send all packets that should go to IP address X to this MAC address‚Äù. The router will remember that and use that information for all future requests. This is called ‚ÄúARP poisoning.‚Äù&lt;/p&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/posts/trusting-sdks/image_2.png&quot; width=&quot;650&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;See how all packets are now routed through the attacker instead of going directly from the remote host to you?&lt;/p&gt;

&lt;p&gt;As soon as the packets go through the attacker‚Äôs machine there is some risk. It‚Äôs the same risk you have when trusting your ISP or a VPN service: if the services you use are properly encrypted, they can‚Äôt really know details about what you‚Äôre doing or modify packets without your client (e.g. browser) noticing. As mentioned before there is still basic information that will always be visible such as certain metadata (e.g. the host name).&lt;/p&gt;

&lt;p&gt;If there are web packets that are unencrypted (say HTTP) the attacker can not only look inside and read their content, but can also modify anything in there with no way of detecting the attack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: the technique described above is different from what you might have read about the security issues with public WiFi networks. Public WiFis are a problem because everybody can just read whatever packets are flying through the air, and if they‚Äôre unencrypted HTTP, it‚Äôs easy to read what‚Äôs happening. ARP pollution works on any network, no matter if public or not, or if WiFi or ethernet.&lt;/p&gt;

&lt;h2 id=&quot;lets-see-this-in-action&quot;&gt;Let‚Äôs see this in action&lt;/h2&gt;

&lt;p&gt;Let‚Äôs look into some SDKs and how they distribute their files, and see if we can find something.&lt;/p&gt;

&lt;h3 id=&quot;cocoapods&quot;&gt;CocoaPods&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Open source Pods&lt;/strong&gt;: CocoaPods uses git under the hood to download code from code hosting services like GitHub. The &lt;code class=&quot;highlighter-rouge&quot;&gt;git://&lt;/code&gt; protocol uses &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh://&lt;/code&gt;, which is similarly encrypted to HTTPs. In general, if you use CocoaPods to install open source SDKs from GitHub, you‚Äôre pretty safe.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Closed source Pods&lt;/strong&gt;: When preparing this blog post, I noticed that Pods can define a HTTP URL to reference binary SDKs, so I submitted multiple pull requests (&lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/7249&quot;&gt;1&lt;/a&gt; and &lt;a href=&quot;https://github.com/CocoaPods/CocoaPods/pull/7250&quot;&gt;2&lt;/a&gt;) that got merged and released with &lt;a href=&quot;https://blog.cocoapods.org/CocoaPods-1.4.0/&quot;&gt;CocoaPods 1.4.0&lt;/a&gt; to show warnings when a Pod uses unencrypted http.&lt;/p&gt;

&lt;h3 id=&quot;crashlytics-sdk&quot;&gt;Crashlytics SDK&lt;/h3&gt;

&lt;p&gt;Crashlytics uses CocoaPods as the default distribution, but has 2 alternative installation methods: the Fabric Mac app and manual installation, which are both https encrypted, so not much we can do here.&lt;/p&gt;

&lt;h3 id=&quot;localytics&quot;&gt;&lt;a href=&quot;http://docs.localytics.com/dev/ios.html&quot;&gt;Localytics&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Let‚Äôs look at a sample SDK, the docs page is unencrypted via http (see the address bar)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you might think: ‚ÄúAh, I‚Äôm just reading the docs here, I don‚Äôt care if it‚Äôs unencrypted‚Äù. The problem here is that the download link (in blue) is also transferred as part of the website, meaning an attacker can easily replace the &lt;code class=&quot;highlighter-rouge&quot;&gt;https://&lt;/code&gt; link with &lt;code class=&quot;highlighter-rouge&quot;&gt;http://&lt;/code&gt;, making the actual file download unsafe.&lt;/p&gt;

&lt;p&gt;Alternatively an attacker could just switch the https:// link to the attacker‚Äôs URL that looks similar&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://s3.amazonaws.com/localytics-sdk-docs/sdk.zip&quot;&gt;https://s3.amazonaws.com/localytics-sdk/sdk.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://s3.amazonaws.com/localytics-sdk-docs/sdk.zip&quot;&gt;https://s3.amazonaws.com/localytics-sdk-binaries/sdk.zip&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there is no good way for the user to verify that the specific host, URL or S3 bucket belongs to the author of the SDK.&lt;/p&gt;

&lt;p&gt;To verify this I‚Äôve set up my &lt;a href=&quot;https://www.raspberrypi.org/&quot;&gt;Raspberry PI&lt;/a&gt; to intercept the traffic and do various SSL Stripping (downgrading of HTTPS connections to HTTP) across the board, from JavaScript files, to image resources and of course download links.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_4.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the download link was downgraded to HTTP, it‚Äôs easy to replace the content of the zip file as well:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_5.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Replacing HTML text on the fly is pretty easy, but how can an attacker replace the content of a zip file or binary?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The attacker downloads the original SDK&lt;/li&gt;
  &lt;li&gt;The attacker inserts malicious code into the SDK&lt;/li&gt;
  &lt;li&gt;The attacker compresses the modified SDK&lt;/li&gt;
  &lt;li&gt;The attacker looks at packets coming by, and jumps in to replace any zip file matching a certain pattern with the file the attacker prepared&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(This is the same approach used by the &lt;a href=&quot;https://charlesreid1.com/wiki/MITM_Labs/Bettercap_to_Replace_Images&quot;&gt;image replacement trick&lt;/a&gt;: Every image that‚Äôs transferred via HTTP gets replaced by a meme)&lt;/p&gt;

&lt;p&gt;As a result, the downloaded SDK might include additional files or code that was modified:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_6.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For this attack to work, the requirements are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The attacker is in the same network as you&lt;/li&gt;
  &lt;li&gt;The docs page is unencrypted and allows SSL Stripping on all links&lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: center&quot;&gt;
  &lt;img src=&quot;/assets/posts/trusting-sdks/image_7.png&quot; width=&quot;600&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Localytics resolved the issue after disclosing it, so both the docs page, and the actual download are now HTTPs encrypted.&lt;/p&gt;

&lt;h3 id=&quot;askingpoint&quot;&gt;&lt;a href=&quot;https://www.askingpoint.com/documentation-ios-sdk/&quot;&gt;AskingPoint&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Looking at the next SDK, we have a HTTPs encrypted docs page, looking at the screenshot, this looks secure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Turns out, the HTTPs based website links to an unencrypted HTTP file, and web browsers don‚Äôt warn users in those cases (&lt;a href=&quot;https://developers.google.com/web/fundamentals/security/prevent-mixed-content/what-is-mixed-content&quot;&gt;some browsers already show a warning if JS/CSS files are downloaded via HTTP&lt;/a&gt;). It‚Äôs almost impossible for the user to detect that something is going on here, except if they were to actually manually compare the hashes provided. As part of this project, I filed a security report for both Google Chrome (&lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=794830&quot;&gt;794830&lt;/a&gt;) and Safari (&lt;a href=&quot;https://openradar.appspot.com/radar?id=5000976083714048&quot;&gt;rdar://36039748&lt;/a&gt;) to warn the user of unencrypted file downloads on HTTPs sites.&lt;/p&gt;

&lt;h3 id=&quot;aws-sdk&quot;&gt;&lt;a href=&quot;https://aws.amazon.com/mobile/sdk/&quot;&gt;AWS SDK&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_9.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At the time I was conducting this research, the AWS iOS SDK download page was HTTPs encrypted, however linked to a non-encrypted zip download, similarly to the SDKs mentioned before. The issue has been resolved after disclosing it to Amazon.&lt;/p&gt;

&lt;h2 id=&quot;putting-it-all-together&quot;&gt;Putting it all together&lt;/h2&gt;

&lt;p&gt;Thinking back about the iOS privacy vulnerabilities mentioned before (iCloud phishing, location access through pictures, accessing camera in background), what if we‚Äôre not talking about evil developers trying to trick their users‚Ä¶ What if we talk about attackers that &lt;strong&gt;target you, the iOS developer&lt;/strong&gt;, to reach millions of users within a short amount of time?&lt;/p&gt;

&lt;h3 id=&quot;attacking-the-developer&quot;&gt;Attacking the developer&lt;/h3&gt;

&lt;p&gt;What if an SDK gets modified as you download it using a person-in-the-middle attack, and inserts malicious code that breaks the user‚Äôs trust? Let‚Äôs take the iCloud phishing popup as an example, how hard would it be to use apps from other app developers to steal passwords from the user for you, and send them to your remote server?&lt;/p&gt;

&lt;p&gt;In the video below you can see a sample iOS app that shows a mapview. After downloading and adding the AWS SDK to the project, you can see how malicious code is being executed, in this case an iCloud phishing popup is shown and the cleartext iCloud password can be accessed and sent to any remote server.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
  &lt;figure&gt;
    &lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/Mx2oFCyWg2A&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;The only requirement for this particular attack to work is that the attacker is in the same network as you (e.g. stays in the same conference hotel). Alternatively this attack can also be done by your ISP or the VPN service you use. My Mac runs the default macOS configuration, meaning there is no proxy, custom DNS or VPN set up.&lt;/p&gt;

&lt;p&gt;Setting up an attack like this is surprisingly easy using publicly available tools that are designed to do automatic SSL Stripping, ARP pollution and replacing of content of various requests. If you‚Äôve done it before, it will take less than an hour to set everything up on any computer, including a Raspberry Pi, which I used for my research. The total costs for the whole attack is therefore less than $50.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/trusting-sdks/image_10.jpg&quot; width=&quot;420&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I decided not to publish the names of all the tools I used, nor the code I wrote. You might want to look into well-known tools like &lt;a href=&quot;https://moxie.org/software/sslstrip/&quot;&gt;sslstrip&lt;/a&gt;, &lt;a href=&quot;https://mitmproxy.org/&quot;&gt;mitmproxy&lt;/a&gt; and &lt;a href=&quot;https://www.wireshark.org/&quot;&gt;Wireshark&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;running-arbitrary-code-on-the-developers-machine&quot;&gt;Running arbitrary code on the developer‚Äôs machine&lt;/h3&gt;

&lt;p&gt;The previous example injected malicious code into the iOS app using a hijacked SDK. Another attack vector is the developer‚Äôs Mac. Once an attacker can run code on your machine, and maybe even has remote SSH access, the damage could be significant:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Activate remote SSH access for the admin account&lt;/li&gt;
  &lt;li&gt;Install keylogger to get admin password&lt;/li&gt;
  &lt;li&gt;Decrypt the keychain using the password, and send all credentials to remote server&lt;/li&gt;
  &lt;li&gt;Access local secrets, like AWS credentials, CocoaPods &amp;amp; RubyGems push tokens and more
    &lt;ul&gt;
      &lt;li&gt;If a developer now has a popular CocoaPod, you can spread more malicious code through their SDKs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Access literally any file and database on your Mac, including iMessage conversations, emails and source code&lt;/li&gt;
  &lt;li&gt;Record the user‚Äôs screen without them knowing&lt;/li&gt;
  &lt;li&gt;Install a new root SSL certificate, allowing the attacker to intercept most of your encrypted network requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To prove that this is working, I looked into how to inject malicious code in a shell script developers run locally, in this case BuddyBuild:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Same requirements as in the previous example, attacker needs to be in the same network&lt;/li&gt;
  &lt;li&gt;BuddyBuild docs told users to &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; an unencrypted URL piping the content over to &lt;code class=&quot;highlighter-rouge&quot;&gt;sh&lt;/code&gt;, meaning any code the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; command returns will be executed&lt;/li&gt;
  &lt;li&gt;The modified &lt;code class=&quot;highlighter-rouge&quot;&gt;UpdateSDK&lt;/code&gt; is provided by the attacker (Raspberry PI), and asks for the admin password (normally BuddyBuild‚Äôs update script doesn‚Äôt ask for this)&lt;/li&gt;
  &lt;li&gt;Within under a second, the malicious script does the following
    &lt;ul&gt;
      &lt;li&gt;Enable SSH remote access for the current account&lt;/li&gt;
      &lt;li&gt;Install &amp;amp; setup a keylogger that auto-starts when you login&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the attacker has the root password and SSH access, they can do anything listed above.&lt;/p&gt;

&lt;div class=&quot;video&quot;&gt;
  &lt;figure&gt;
    &lt;iframe width=&quot;100%&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/N1Wj6ipc-HU&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;BuddyBuild resolved the issue after reporting it.&lt;/p&gt;

&lt;h3 id=&quot;how-realistic-is-such-an-attack&quot;&gt;How realistic is such an attack?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Very!&lt;/strong&gt; Open your Network settings on the Mac, and take a look at the list of WiFi networks your Mac was connected to. In my case, my MacBook was connected to over 200 hotspots. How many of them can you fully trust? Even in a trustworthy network, there could still be other machines that got hacked previously which are doing remote controlled attacks (see section above)&lt;/p&gt;

&lt;p&gt;SDKs and developer tools become more and more a target for attackers. Some examples from the past years:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/XcodeGhost&quot;&gt;Xcode Ghost&lt;/a&gt; affected about 4,000 iOS apps, including WeChat:
    &lt;ul&gt;
      &lt;li&gt;Attacker gains remote access to any phone running the app&lt;/li&gt;
      &lt;li&gt;Show phishing popups&lt;/li&gt;
      &lt;li&gt;Access and modify the clipboard (dangerous when using password managers)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://9to5mac.com/2017/03/07/cia-ios-malware-wikileaks/&quot;&gt;The NSA worked on finding iOS exploits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kaspersky.com/blog/pegasus-spyware/14604/&quot;&gt;Pegasus&lt;/a&gt;: malware for non-jailbroken iPhones, &lt;a href=&quot;https://citizenlab.ca/2016/08/million-dollar-dissident-iphone-zero-day-nso-group-uae/&quot;&gt;used by governments&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/KeyRaider&quot;&gt;KeyRaider&lt;/a&gt;: Only affected jailbroken iPhones, but still stole user-credentials from over 200,000 end-users&lt;/li&gt;
  &lt;li&gt;Just the last few weeks, there have been multiple posts about how this affects web projects also (e.g. &lt;a href=&quot;https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;https://scotthelme.co.uk/protect-site-from-cyrptojacking-csp-sri/&quot;&gt;2&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theiphonewiki.com/wiki/Malware_for_iOS&quot;&gt;and many, many more&lt;/a&gt;. Another approach is getting access to the download server (e.g. S3 bucket using access keys) and replacing the binary. This happened multiple times in the past few years, for example &lt;a href=&quot;https://www.macrumors.com/2016/03/07/transmission-malware-downloaded-6500-times/&quot;&gt;Transmission Mac app incident&lt;/a&gt;. This opens a whole new level of area of attack, which I didn‚Äôt cover in this blog post.&lt;/p&gt;

&lt;h3 id=&quot;conferences-hotels-coffee-shops&quot;&gt;Conferences, hotels, coffee shops&lt;/h3&gt;

&lt;p&gt;Every time you connect to the WiFi at a conference, hotel or coffee shop, you become an easy target. Attackers know that there is a high number of developers during conferences and can easily make use of the situation.&lt;/p&gt;

&lt;h3 id=&quot;how-can-sdk-providers-protect-their-users&quot;&gt;How can SDK providers protect their users?&lt;/h3&gt;

&lt;p&gt;This would go out of scope for this blog post. Mozilla offers a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Security&quot;&gt;security guide&lt;/a&gt; that‚Äôs a good starting point. Mozilla provides a tool called &lt;a href=&quot;https://observatory.mozilla.org&quot;&gt;observatory&lt;/a&gt; that will do some automatic checks of the server settings and certificates.&lt;/p&gt;

&lt;h3 id=&quot;how-many-of-the-most-popular-sdks-are-affected-by-this-vulnerability&quot;&gt;How many of the most popular SDKs are affected by this vulnerability?&lt;/h3&gt;

&lt;div style=&quot;float: right; width: 340px;&quot;&gt;
  &lt;img src=&quot;/assets/posts/trusting-sdks/image_11.png&quot; width=&quot;100%&quot; /&gt;
  &lt;br /&gt;
  &lt;br /&gt;
  &lt;br /&gt;
  &lt;img src=&quot;/assets/posts/trusting-sdks/image_12.png&quot; width=&quot;100%&quot; /&gt;
  &lt;br /&gt;
  &lt;br /&gt;
  &lt;br /&gt;
  &lt;img src=&quot;/assets/posts/trusting-sdks/image_13.png&quot; width=&quot;100%&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;While doing this research starting on 23rd November 2017, I investigated 41 of the most popular mobile SDKs according to &lt;a href=&quot;https://www.appsight.io/?asot=2&amp;amp;o=top&amp;amp;os=ios&quot;&gt;AppSight&lt;/a&gt; (counting all Facebook and Google SDKs as one, as they share the same installation method - skipping SDKs that are open source on GitHub)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;41&lt;/strong&gt; SDKs checked
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;23&lt;/strong&gt; are closed source and you can only download binary files&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;18&lt;/strong&gt; of those are open source (all of them on GitHub)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;13&lt;/strong&gt; are an easy target of person-in-the-middle attacks without any indication to the user
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;10&lt;/strong&gt; of them are closed source SDKs&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;3&lt;/strong&gt; of them are open source SDKs, meaning the user can either download the SDK via unencrypted HTTP from the official website, or securely clone the source code from GitHub&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5&lt;/strong&gt; of the 41 SDKs offer no way to download the SDK securely, meaning they don‚Äôt support any HTTPs at all, nor use a service that does (e.g. GitHub)&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;31%&lt;/strong&gt; of the top used SDKs are easy targets for this attack&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5&lt;/strong&gt; additional SDKs required an account to download the SDK (do they have something to hide?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I notified all affected in November/December 2017, giving them 2 months to resolve the issue before publicly talking about it. Out of the 13 affected SDKs&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;1&lt;/strong&gt; resolved the issue within three business days&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;5&lt;/strong&gt; resolved the issue within a month&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;7&lt;/strong&gt; SDKs are still vulnerable to this attack at the time of publishing this post.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The SDK providers that are still affected haven‚Äôt responded to my emails, or just replied with ‚ÄúWe‚Äôre gonna look into this‚Äù - all of them in the top 50 most most-used SDKs.&lt;/p&gt;

&lt;p&gt;Looking through the available CocoaPods, there are a total of &lt;strong&gt;4,800&lt;/strong&gt; releases affected, from a total of &lt;strong&gt;623&lt;/strong&gt; CocoaPods. I generated this data locally using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Specs&lt;/code&gt; repo with the command &lt;code class=&quot;highlighter-rouge&quot;&gt;grep -l -r '&quot;http&quot;: &quot;http://' *&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;open-source-vs-closed-source&quot;&gt;Open Source vs Closed Source&lt;/h3&gt;

&lt;p&gt;Looking the number above, you are much likely to be affected by attacks if you use closed source SDKs. More importantly: When an SDK is closed source, it‚Äôs much harder for you to verify the integrity of the dependency. As you probably know, you should always &lt;a href=&quot;https://guides.cocoapods.org/using/using-cocoapods.html#should-i-check-the-pods-directory-into-source-control&quot;&gt;check the Pods directory into version control&lt;/a&gt;, to detect changes and be able to audit your dependency updates. 100% of the open source SDKs I investigated can be used directly from GitHub, meaning even the 3 SDKs affected are not actually affected if you make sure to use the version on GitHub instead of taking it from the provider‚Äôs website.&lt;/p&gt;

&lt;p&gt;Based on the numbers above it is clear that in addition to not being able to dive into the source code for closed source SDKs you also have a much higher risk of being attacked. Not only person-in-the-middle attacks, but also:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The attacker gains access to the SDK download server&lt;/li&gt;
  &lt;li&gt;The company providing the SDK gets compromised&lt;/li&gt;
  &lt;li&gt;The local government forces the company to include back-doors&lt;/li&gt;
  &lt;li&gt;The company providing the SDK is evil and includes code &amp;amp; tracking you don‚Äôt want&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;You are responsible for the binaries you ship!&lt;/strong&gt; You have to make sure you don‚Äôt break your user‚Äôs trust, European Union data protection laws (&lt;a href=&quot;https://www.eugdpr.org/&quot;&gt;GDPR&lt;/a&gt;) or steal the user‚Äôs credentials via a malicious SDK.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;

&lt;p&gt;As a developer, it‚Äôs our responsibility to make sure we only ship code we trust. One of the easiest attack vectors right now is via malicious SDKs. If an SDK is open source, hosted on GitHub, and is installed via CocoaPods, you‚Äôre pretty safe. Be extra careful with bundling closed-source binaries or SDKs you don‚Äôt fully trust.&lt;/p&gt;

&lt;p&gt;Since this type of attack can be done with little trace, you will not be able to easily find if your codebase is affected. By using open source code, we as developers can better protect ourselves, and with it, our customers.&lt;/p&gt;

&lt;p&gt;Check out my &lt;a href=&quot;/privacy&quot;&gt;other privacy and security related publications&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;thank-you&quot;&gt;Thank you&lt;/h2&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/acrooow&quot;&gt;Manu Wallner&lt;/a&gt; for doing the voice recordings for the video.&lt;/p&gt;

&lt;p&gt;Special thanks to my friends for providing feedback on this post: &lt;a href=&quot;https://twitter.com/jasdev&quot;&gt;Jasdev Singh&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/schukin&quot;&gt;Dave Schukin&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/acrooow&quot;&gt;Manu Wallner&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/domysee&quot;&gt;Dominik Weber&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/giladronat&quot;&gt;Gilad&lt;/a&gt;, &lt;a href=&quot;http://haunold.me/&quot;&gt;Nicolas Haunold&lt;/a&gt; and Neel Rao.&lt;/p&gt;</content><author><name></name></author><category term="security" /><category term="privacy" /><category term="sdks" /><summary type="html">Third-party SDKs can often easily be modified while you download them! Using a simple person-in-the-middle attack, anyone in the same network can insert malicious code into the library, and with that into your application, as a result running in your user‚Äôs pockets.</summary></entry><entry><title type="html">Mac Privacy: Sandboxed Mac apps can record your screen at any time without you knowing</title><link href="https://krausefx.github.io/krausefx.com//blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots" rel="alternate" type="text/html" title="Mac Privacy: Sandboxed Mac apps can record your screen at any time without you knowing" /><published>2018-02-10T00:00:00+00:00</published><updated>2018-02-10T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/mac-privacy-sandboxed-mac-apps-can-take-screenshots">&lt;h2 id=&quot;facts&quot;&gt;Facts&lt;/h2&gt;

&lt;p&gt;Any Mac app, sandboxed or not sandboxed can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Take screenshots of your Mac silently without you knowing&lt;/li&gt;
  &lt;li&gt;Access every pixel, even if the Mac app is in the background&lt;/li&gt;
  &lt;li&gt;Use basic &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;OCR software&lt;/a&gt; to read the text on the screen&lt;/li&gt;
  &lt;li&gt;Access all connected monitors&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-the-worst-that-could-happen&quot;&gt;What‚Äôs the worst that could happen?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Read password and keys from password managers&lt;/li&gt;
  &lt;li&gt;Detect what web services you use (e.g. email provider)&lt;/li&gt;
  &lt;li&gt;Read all emails and messages you open on your Mac&lt;/li&gt;
  &lt;li&gt;When a developer is targeted, this allows the attacker to potentially access sensitive source code, API keys or similar data&lt;/li&gt;
  &lt;li&gt;Learn personal information about the user, like their bank details, salary, address, etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;/assets/posts/mac-take-screenshots.png&quot; target=&quot;_blank&quot;&gt;
  &lt;img src=&quot;/assets/posts/mac-take-screenshots.png&quot; /&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;This project is a proof of concept and should not be used in production. The goal is to highlight a privacy loophole that can be abused by Mac apps.&lt;/p&gt;

&lt;h2 id=&quot;how-can-i-protect-myself-as-a-user&quot;&gt;How can I protect myself as a user?&lt;/h2&gt;

&lt;p&gt;To my knowledge there is no way to protect yourself as of now.&lt;/p&gt;

&lt;h2 id=&quot;proposal&quot;&gt;Proposal&lt;/h2&gt;

&lt;p&gt;There are lots of valid use-cases for Mac apps to record the screen, e.g. &lt;a href=&quot;https://support.1password.com/one-time-passwords/&quot;&gt;1Password 2fA support&lt;/a&gt;, screen recording software or even simple screen sharing via your web browser or Skype. However there must be some kind of control:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The App Store review process could verify the Sandbox entitlements for accessing the screen&lt;/li&gt;
  &lt;li&gt;Put the user in charge with a permission dialog&lt;/li&gt;
  &lt;li&gt;Additionally the user should be notified whenever an app accesses the screen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Of course, I also &lt;a href=&quot;https://openradar.appspot.com/radar?id=5610698700750848&quot;&gt;filed a radar&lt;/a&gt; (rdar://37423927) to notify Apple about this issue.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;A developer just needs to use &lt;code class=&quot;highlighter-rouge&quot;&gt;CGWindowListCreateImage&lt;/code&gt; to generate a capture of the complete screen within an instant:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;CGImageRef&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;screenshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CGWindowListCreateImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;CGRectInfinite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGWindowListOptionOnScreenOnly&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGNullWindowID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kCGWindowImageDefault&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;NSBitmapImageRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bitmapRep&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NSBitmapImageRep&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initWithCGImage&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In my experiments, I piped the generated image over to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Optical_character_recognition&quot;&gt;OCR library&lt;/a&gt; and was able to get all text that was rendered on the user‚Äôs machine.&lt;/p&gt;</content><author><name></name></author><category term="mac" /><category term="screenshot" /><category term="privacy" /><summary type="html">Facts</summary></entry><entry><title type="html">Introducing Overkill - Don‚Äôt let iTunes interrupt your workflow</title><link href="https://krausefx.github.io/krausefx.com//blog/introducing-overkill-dont-let-itunes-interrupt-your-workflow" rel="alternate" type="text/html" title="Introducing Overkill - Don't let iTunes interrupt your workflow" /><published>2017-12-12T00:00:00+00:00</published><updated>2017-12-12T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/introducing-overkill-dont-let-itunes-interrupt-your-workflow</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/introducing-overkill-dont-let-itunes-interrupt-your-workflow">&lt;p&gt;Exactly one year after the initial launch of Overkill as a shell script, after being &lt;a href=&quot;https://www.producthunt.com/posts/overkill&quot;&gt;#1 on ProductHunt&lt;/a&gt;, I‚Äôm extremely excited to announce that &lt;strong&gt;Overkill is now a native Mac app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Did iTunes ever launch without you opening it? Use Overkill to instantly kill the iTunes process once it opened itself, so your workflow isn‚Äôt interrupted.&lt;/p&gt;

&lt;p style=&quot;color: #888; margin-left: 20px&quot;&gt;But Felix, you can use the check box to not launch iTunes when you connect your phone!&lt;/p&gt;

&lt;p&gt;Yes, that is correct, but connecting a device to your Mac is only one of the many reasons when iTunes can‚Äôt wait to spread joy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You click the play/pause key while listening to a web-based music player (e.g. SoundCloud, YouTube)&lt;/li&gt;
  &lt;li&gt;Someone sent you a link to an iOS app&lt;/li&gt;
  &lt;li&gt;You click on a link on the web, and didn‚Äôt expect it to be a Music link&lt;/li&gt;
  &lt;li&gt;You updated iTunes&lt;/li&gt;
  &lt;li&gt;You launch iTunes by clicking on the icon by mistake&lt;/li&gt;
  &lt;li&gt;You open a video/music file in Finder, and forgot to change the default app to VLC&lt;/li&gt;
  &lt;li&gt;You connect Bluetooth headphones&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;before-overkill&quot;&gt;Before Overkill&lt;/h3&gt;

&lt;div class=&quot;video&quot;&gt;
  &lt;figure&gt;
    &lt;iframe width=&quot;670&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/4kn-HefqjXE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;As you can see in the video above, iTunes would launch while you‚Äôre typing something, stealing the window focus, and making this sound we all love to hear.&lt;/p&gt;

&lt;h3 id=&quot;with-overkill&quot;&gt;With Overkill&lt;/h3&gt;

&lt;div class=&quot;video&quot;&gt;
  &lt;figure&gt;
    &lt;iframe width=&quot;670&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/Uk2oEKMC2_k&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;With Overkill, you connect your iPhone to charge it, and you can still use your Mac.&lt;/p&gt;

&lt;h2 id=&quot;introducing-overkill-for-mac&quot;&gt;Introducing Overkill for Mac&lt;/h2&gt;

&lt;p&gt;Overkill is a simple, elegant Mac app, that runs in the background and makes sure iTunes never interrupts your work. 
And for those movie nights where you actually want to use iTunes, just click on &lt;code class=&quot;highlighter-rouge&quot;&gt;Pause Overkill&lt;/code&gt; and enjoy the evening.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/overkill.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have other apps you don‚Äôt want to launch automatically (e.g. Photos app), you can add those apps to the Overkill list as well.&lt;/p&gt;

&lt;p&gt;No installation required, just download Overkill from the link below, double click the Overkill icon, and you‚Äôre good to go!&lt;/p&gt;

&lt;h3 style=&quot;text-align: center; font-size: 35px; margin-bottom: 50px&quot;&gt;
  &lt;a href=&quot;https://github.com/KrauseFx/overkill-for-mac/releases/download/1.0/Overkill.zip&quot; target=&quot;_blank&quot; style=&quot;color: #60A74E !important; text-decoration: underline;&quot;&gt;
    Download Overkill Mac App
  &lt;/a&gt;
&lt;/h3&gt;

&lt;p&gt;Unfortunately I couldn‚Äôt submit Overkill to the Mac App Store, as the sandboxing doesn‚Äôt allow the termination of other processes.&lt;/p&gt;

&lt;h2 id=&quot;features&quot;&gt;Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Runs silently in the background, and kills iTunes&lt;/li&gt;
  &lt;li&gt;Easily pause Overkill if you want to use iTunes&lt;/li&gt;
  &lt;li&gt;Support for both Dark and Light mode of the menu bar&lt;/li&gt;
  &lt;li&gt;Supports auto start&lt;/li&gt;
  &lt;li&gt;Supports any Mac app, e.g. add the Photos app to be killed also&lt;/li&gt;
  &lt;li&gt;No CPU usage, no polling, no analytics, just 300 lines of native Mac code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, as most of the project I work on, Overkill is 100% open source under the MIT license:&lt;/p&gt;

&lt;h3 style=&quot;text-align: center; font-size: 30px; margin-top: 0px&quot;&gt;
  &lt;a href=&quot;https://github.com/KrauseFx/overkill-for-mac&quot; target=&quot;_blank&quot; style=&quot;text-decoration: underline;&quot;&gt;
    Open on GitHub
  &lt;/a&gt;
&lt;/h3&gt;</content><author><name></name></author><category term="itunes" /><category term="overkill" /><summary type="html">Exactly one year after the initial launch of Overkill as a shell script, after being #1 on ProductHunt, I‚Äôm extremely excited to announce that Overkill is now a native Mac app.</summary></entry><entry><title type="html">Introducing Major Key - Easily jot down quick notes</title><link href="https://krausefx.github.io/krausefx.com//blog/introducing-major-key-easily-jot-down-quick-notes" rel="alternate" type="text/html" title="Introducing Major Key - Easily jot down quick notes" /><published>2017-11-26T00:00:00+00:00</published><updated>2017-11-26T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/introducing-major-key-easily-jot-down-quick-notes</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/introducing-major-key-easily-jot-down-quick-notes">&lt;p&gt;&lt;img src=&quot;/assets/posts/MajorKey.png&quot; width=&quot;300&quot; align=&quot;right&quot; id=&quot;majorkeyscreenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How often are you on the run, or hanging out with friends, only to suddenly think of this really important thing you need to do when you‚Äôre back home or back at work?&lt;/p&gt;

&lt;p&gt;You want to jot down that thought as quickly as possible so you don‚Äôt forget, and you want to be reminded whenever you‚Äôre back on your computer.&lt;/p&gt;

&lt;h2 id=&quot;introducing-major-key-the-best-key&quot;&gt;Introducing Major Key, the best key&lt;/h2&gt;

&lt;p&gt;With far less than 100 lines of Swift code, this simple app does all you need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Unlock phone&lt;/li&gt;
  &lt;li&gt;Launch Major Key üîë&lt;/li&gt;
  &lt;li&gt;Type the note&lt;/li&gt;
  &lt;li&gt;Confirm&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within a second you‚Äôll have the note in your email inbox. Extremely useful if you follow the inbox zero approach. All with no waiting times or animations.&lt;/p&gt;

&lt;p&gt;Launch the app, write down a note, hit the üîë button and immediately have the note in your inbox.&lt;/p&gt;

&lt;div class=&quot;video&quot; style=&quot;float: left; margin-right: 40px&quot;&gt;
  &lt;figure&gt;
    &lt;iframe width=&quot;193&quot; height=&quot;418&quot; src=&quot;//www.youtube.com/embed/dOm5H5a8fbY&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;why-a-new-app&quot;&gt;Why a new app?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Using any kind of &lt;strong&gt;Notes app&lt;/strong&gt; works rather nicely, however involves overhead, and chances are you forget on checking the notes app when you‚Äôre back on your Mac.&lt;/li&gt;
  &lt;li&gt;Sending yourself an &lt;strong&gt;email&lt;/strong&gt; with any email client involves extra work, as you need to start typing your email, and you get to see your inbox (&lt;a href=&quot;https://techcrunch.com/2014/12/17/compose-is-a-distraction-free-email-app-that-only-lets-you-write-messages/&quot;&gt;similar idea&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;IFTTT Notes app&lt;/strong&gt; was perfect, however it was discontinued, and the &lt;strong&gt;new IFTTT&lt;/strong&gt; app causes problems on the iPhone X due to abusing Web Clips to make it work.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;üîë Major Key is not available in the App Store, but is open source, and super easy to install if you‚Äôre a developer. If interest is there, I could also publish the app to the store.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h3 style=&quot;text-align: center; font-size: 40px; margin-top: 40px; margin-bottom: 20px&quot;&gt;
  &lt;a href=&quot;https://github.com/KrauseFx/majorkey&quot; target=&quot;_blank&quot; style=&quot;text-decoration: underline;&quot;&gt;
    Open on GitHub
  &lt;/a&gt;
&lt;/h3&gt;

&lt;style type=&quot;text/css&quot;&gt;
  @media screen and (max-width: 600px) {
    #majorkeyscreenshot {
      width: 100%;
    }
  }
&lt;/style&gt;</content><author><name></name></author><category term="notes" /><category term="ifttt" /><summary type="html"></summary></entry><entry><title type="html">iOS Privacy: watch.user - Access both iPhone cameras any time your app is running</title><link href="https://krausefx.github.io/krausefx.com//blog/ios-privacy-watchuser-access-both-iphone-cameras-any-time-your-app-is-running" rel="alternate" type="text/html" title="iOS Privacy: watch.user - Access both iPhone cameras any time your app is running" /><published>2017-10-25T00:00:00+00:00</published><updated>2017-10-25T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/ios-privacy-watchuser-access-both-iphone-cameras-any-time-your-app-is-running</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/ios-privacy-watchuser-access-both-iphone-cameras-any-time-your-app-is-running">&lt;h1 id=&quot;facts&quot;&gt;Facts&lt;/h1&gt;

&lt;p&gt;Once you grant an app access to your camera, it can&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;access both the front and the back camera&lt;/li&gt;
  &lt;li&gt;record you at any time the app is in the foreground&lt;/li&gt;
  &lt;li&gt;take pictures and videos without telling you&lt;/li&gt;
  &lt;li&gt;upload the pictures/videos it takes immediately&lt;/li&gt;
  &lt;li&gt;run real-time face recognition to detect facial features or expressions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Have you ever used a social media app while using the bathroom? üöΩ&lt;/p&gt;

&lt;p&gt;All without indicating that your phone is recording you and your surrounding, no LEDs, no light or any other kind of indication.&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;This project is a proof of concept and should not be used in production. The goal is to highlight a privacy loophole that can be abused by iOS apps.&lt;/p&gt;

&lt;h2 id=&quot;what-can-an-ios-app-do&quot;&gt;What can an iOS app do?&lt;/h2&gt;

&lt;p&gt;iOS users often grant camera access to an app soon after they download it (e.g. to add an avatar or send a photo). These apps, like a messaging app or any news-feed-based app, can easily track the users face, take pictures, or live stream the front and back camera, without the user‚Äôs consent.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Get full access to the front and back camera of an iPhone/iPad any time your app is running in the foreground&lt;/li&gt;
  &lt;li&gt;Use the front and the back camera to know what your user is doing right now and where the user is located based on image data&lt;/li&gt;
  &lt;li&gt;Upload random frames of the video stream to your web service, and run a proper face recognition software, which enables you to
    &lt;ul&gt;
      &lt;li&gt;Find existing photos of the person on the internet&lt;/li&gt;
      &lt;li&gt;Learn how the user looks like and create a 3d model of the user‚Äôs face&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Live stream their camera onto the internet (e.g. while they sit on the toilet), with the recent innovation around faster internet connections, faster processors and more efficient video codecs it‚Äôs hard to detect for the average user&lt;/li&gt;
  &lt;li&gt;Estimate the mood of the user based on what you show in your app (e.g. news feed of your app)&lt;/li&gt;
  &lt;li&gt;Detect if the user is on their phone alone, or watching together with a second person&lt;/li&gt;
  &lt;li&gt;Recording stunning video material from bathrooms around the world, using both the front and the back camera, while the user scrolls through a social feed or plays a game&lt;/li&gt;
  &lt;li&gt;Using the new built-in iOS 11 Vision framework, every developer can very easily parse facial features in real-time like the eyes, mouth, and the face frame&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-can-i-protect-myself-as-a-user&quot;&gt;How can I protect myself as a user?&lt;/h2&gt;

&lt;p&gt;There are only a few things you can do:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The only real safe way to protect yourself is using camera covers: There is many different covers available, find one that looks nice for you, or use a sticky note (&lt;a href=&quot;https://www.amazon.com/Original-Webcam-Cover-directly-Manufacturer/dp/B01LWS2X8I&quot;&gt;for example&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;You can revoke camera access for all apps, always use the built-in camera app, and use the image picker of each app to select the photo (which will cause you to run into a problem I described with &lt;a href=&quot;https://github.com/krausefx/detect.location&quot;&gt;detect.location&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;To avoid this as well, the best way is to use Copy &amp;amp; Paste to paste the screenshot into your messaging application. If an app has no copy &amp;amp; paste support, you‚Äôll have to either expose your image library, or your camera.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It‚Äôs interesting that many people cover their camera, &lt;a href=&quot;https://www.nytimes.com/2016/06/23/technology/personaltech/mark-zuckerberg-covers-his-laptop-camera-you-should-consider-it-too.html&quot;&gt;including Mark Zuckerberg&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;proposal&quot;&gt;Proposal&lt;/h2&gt;

&lt;p&gt;How can the root of the problem be fixed, so we don‚Äôt have to use camera covers?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Offer a way to grant temporary access to the camera (e.g. to take and share one picture with a friend on a messaging app), related to &lt;a href=&quot;https://github.com/krausefx/detect.location&quot;&gt;detect.location&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Show an icon in the status bar that the camera is active, and force the status bar to be visible whenever an app accesses the camera&lt;/li&gt;
  &lt;li&gt;Add an LED to the iPhone‚Äôs camera (both sides) that can‚Äôt be worked around by sandboxed apps, which is the elegant solution that the MacBook uses&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I reported the issue to Apple with &lt;a href=&quot;https://openradar.appspot.com/radar?id=5007947352506368&quot;&gt;rdar://35116272&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;video&quot; style=&quot;width: 250px; float: right;margin: 20px&quot;&gt;
  &lt;figure&gt;
    &lt;iframe width=&quot;240&quot; height=&quot;400&quot; src=&quot;//www.youtube.com/embed/GqWUaflPMh0&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;h2 id=&quot;about-the-demo&quot;&gt;About the demo&lt;/h2&gt;

&lt;p&gt;I didn‚Äôt submit the demo to the App Store; however, you can very easily &lt;a href=&quot;https://github.com/KrauseFx/watch.user&quot;&gt;clone the repo&lt;/a&gt; and run it on your own device.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You first have to take a picture that gets ‚Äúposted‚Äù on the fake ‚Äúsocial network‚Äù in the app
    &lt;ul&gt;
      &lt;li&gt;At this point, you‚Äôve granted full access to both of your cameras every time the app is running&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;You browse through a news feed&lt;/li&gt;
  &lt;li&gt;After a bit of scrolling, you‚Äôll suddenly see pictures of yourself, taken a few seconds ago while you scrolled through the feed&lt;/li&gt;
  &lt;li&gt;You realize you‚Äôve been recorded the whole time, and with it, the app ran a face recognition algorithm to detect facial features.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You might say&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Oh, obviously, I never grant camera permissions!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts/watch-user-screenshot.jpg&quot; style=&quot;width: 250px; float: right; border: 2px solid #BBB; margin: 10px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;However, if you‚Äôre using a messaging service, like Messenger, WhatsApp, Telegram or anything else, chances are high you already granted permission to access both your image library (see &lt;a href=&quot;https://github.com/KrauseFx/detect.location&quot;&gt;detect.location&lt;/a&gt;) and your camera. You can check which apps have access to your cameras and photo library by going to Settings &amp;gt; Privacy.&lt;/p&gt;

&lt;p&gt;The full source code is available &lt;a href=&quot;https://github.com/KrauseFx/watch.user&quot;&gt;on GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;how-does-the-demo-app-get-access-to-the-camera&quot;&gt;How does the demo app get access to the camera?&lt;/h3&gt;

&lt;p&gt;Once you take and post one picture or video via a social network app, you grant full access to the camera, and any time the app is running, the app can use the camera.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-screenshot-on-the-right&quot;&gt;What‚Äôs the screenshot on the right&lt;/h3&gt;

&lt;p&gt;As part of iOS 11, there is now an easy to use Vision framework, that allows developers to easily track faces. The screenshot shows that it‚Äôs possible to get some basic emotions right, so I wrote a very basic mapping of a user‚Äôs face to the corresponding emoji as a proof of concept. You can see the highlighted facial features, and the detected emoji at the bottom.&lt;/p&gt;

&lt;h2 id=&quot;similar-projects-ive-worked-on&quot;&gt;Similar projects I‚Äôve worked on¬†&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KrauseFx/whats-the-user-doing&quot;&gt;what‚Äôs the user doing&lt;/a&gt;:¬†Raising awareness of what you can do with a smartphones gyro sensors in web browsers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/krausefx/detect.location&quot;&gt;detect.location&lt;/a&gt;:¬†An easy way to access the user‚Äôs iOS location data without actually having access&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/krausefx/steal.password&quot;&gt;steal.password&lt;/a&gt;:¬†Easily get the user‚Äôs Apple ID password, just by asking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Special thanks to &lt;a href=&quot;https://twitter.com/khanlou&quot;&gt;Soroush&lt;/a&gt;, who came up with the initial idea for this write-up.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center; font-size: 40px; margin-top: 40px&quot;&gt;
  &lt;a href=&quot;https://github.com/KrauseFx/watch.user&quot; target=&quot;_blank&quot; style=&quot;text-decoration: underline;&quot;&gt;
    Open on GitHub
  &lt;/a&gt;
&lt;/h3&gt;</content><author><name></name></author><category term="ios" /><category term="privacy" /><category term="phishing" /><category term="camera" /><category term="video" /><summary type="html">Facts</summary></entry><entry><title type="html">iOS Privacy: steal.password - Easily get the user‚Äôs Apple ID password, just by asking</title><link href="https://krausefx.github.io/krausefx.com//blog/ios-privacy-stealpassword-easily-get-the-users-apple-id-password-just-by-asking" rel="alternate" type="text/html" title="iOS Privacy: steal.password - Easily get the user's Apple ID password, just by asking" /><published>2017-10-10T00:00:00+00:00</published><updated>2017-10-10T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/ios-privacy-stealpassword-easily-get-the-users-apple-id-password-just-by-asking</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/ios-privacy-stealpassword-easily-get-the-users-apple-id-password-just-by-asking">&lt;p&gt;Do you want the user‚Äôs Apple ID password, to get access to their Apple account, or to try the same email/password combination on different web services? Just ask your users politely, they‚Äôll probably just hand over their credentials, as they‚Äôre trained to do so üëå&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59dc97a83e00bed1b42c0096_1507631710330__img.png_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59dca223197aeaa9a5932f2e_1507631701259__img.png_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;

&lt;p&gt;This is just a proof of concept, phishing attacks are illegal! Don‚Äôt use this in any of your apps. The goal of this blog post is to close the loophole that has been there for many years, and hasn‚Äôt been addressed yet. For moral reasons, I decided not to include the actual source code of the popup, however it was shockingly easy to replicate the system dialog.&lt;/p&gt;

&lt;h2 id=&quot;why-does-this-work&quot;&gt;Why does this work?&lt;/h2&gt;

&lt;p&gt;iOS asks the user for their iTunes password for many reasons, the most common ones are recently installed iOS operating system updates, or iOS apps that are stuck during installation.&lt;/p&gt;

&lt;p&gt;As a result, users are trained to just enter their Apple ID password whenever iOS prompts you to do so. However, those popups are not only shown on the lock screen, and the home screen, but also inside random apps, e.g. when they want to access iCloud, GameCenter or In-App-Purchases.&lt;/p&gt;

&lt;p&gt;This could easily be abused by any app, just by showing an UIAlertController, that looks exactly like the system dialog.&lt;/p&gt;

&lt;p&gt;Even users who know a lot about technology have a hard time detecting that those alerts are phishing attacks.&lt;/p&gt;

&lt;h2 id=&quot;how-can-you-protect-yourself&quot;&gt;How can you protect yourself&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Hit the home button, and see if the app quits:
    &lt;ul&gt;
      &lt;li&gt;If it closes the app, and with it the dialog, then this was a phishing attack&lt;/li&gt;
      &lt;li&gt;If the dialog and the app are still visible, then it‚Äôs a system dialog. The reason for that is that the system dialogs run on a different process, and not as part of any iOS app.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Don‚Äôt enter your credentials into a popup, instead, dismiss it, and open the Settings app manually. This is the same concept, like you should never click on links on emails, but instead open the website manually&lt;/li&gt;
  &lt;li&gt;If you hit the Cancel button on a dialog, the app still gets access to the content of the password field. Even after entering the first characters, the app probably already has your password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Initially I thought, faking those alerts requires the app developer to know your email. Turns out, some of those auth popups don‚Äôt include the email address, making it even easier for phishing apps to ask for the password.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59dca2accf81e0c47e1e7144_1507631811313__img.png_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;proposal&quot;&gt;Proposal&lt;/h2&gt;

&lt;p&gt;Modern web browsers already do an excellent job protecting users from phishing attacks. Phishing within mobile apps is a rather new concept, and therefore still pretty unexplored.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When asking for the Apple ID from the user, instead of asking for the password directly, ask them to open the settings app&lt;/li&gt;
  &lt;li&gt;Fix the root of the problem, users shouldn‚Äôt constantly be asked for their credentials. It doesn‚Äôt affect all users, but I myself had this issue for many months, until it randomly disappeared.&lt;/li&gt;
  &lt;li&gt;Dialogs from apps could contain the app icon on the top right of the dialog, to indicate an app is asking you, and not the system. This approach is used by push notifications also, this way, an app can‚Äôt just send push notifications as the iTunes app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59dca405c534a5f23644c180_1507632212491__img.jpg_&quot; align=&quot;right&quot; width=&quot;250&quot; class=&quot;inline-img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôve reported this as a radar, which you can dupe:¬†&lt;a href=&quot;https://openradar.appspot.com/radar?id=4952345645416448&quot;&gt;rdar://34885659&lt;/a&gt;¬†üëç&lt;/p&gt;

&lt;p&gt;Sometimes iOS shows the following notification on the lock screen, which opens up the iCloud Settings screen, this is a much better approach than to ask for the password directly:¬†&lt;/p&gt;

&lt;h2 id=&quot;complexity&quot;&gt;Complexity&lt;/h2&gt;

&lt;p&gt;Showing a dialog that looks just like a system popup is super easy, there is no magic or secret code involved, it‚Äôs literally the examples provided in the Apple docs, with a custom text.&lt;/p&gt;

&lt;p&gt;I decided not to open source the actual popup code, however, note that it‚Äôs less than 30 lines of code and every iOS engineer will be able to quickly build their own phishing code.&lt;/p&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;

&lt;p&gt;Imagine if everybody read this before posting a comment on HackerNews/Reddit #oneCanDream :)&lt;/p&gt;

&lt;h3 id=&quot;but-i-have-2-factor-enabled-im-safe-right&quot;&gt;But, I have 2-factor enabled, I‚Äôm safe, right?&lt;/h3&gt;

&lt;p&gt;Good for you, everybody should use 2-step verification obviously, however many people don‚Äôt. At the same time, even if your Apple account is 2FA protected, many users still use the same username/password combination on most web services, meaning if hackers know your Apple ID password, chances are high, they‚Äôre gonna try the same combination on other common services.&lt;/p&gt;

&lt;p&gt;Also, even with 2FA enabled accounts, what if the app asked you for your 2 step code? Most users would gladly request a 2FA-token and ask for it, and directly pipe it over to a remote server.&lt;/p&gt;

&lt;h3 id=&quot;apple-would-never-accept-such-an-app-right&quot;&gt;Apple would never accept such an app, right?&lt;/h3&gt;

&lt;p&gt;Apple is doing a great job protecting users from dangerous third party apps, that‚Äôs why the App Store is built and provided like it is, that‚Äôs why we code sign our application (
&lt;a href=&quot;https://krausefx.com/blog/the-developer-part-of-ios-code-signing-doesnt-add-any-security-to-anything&quot;&gt;not really, but kind of&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;However, it‚Äôs rather easy to run certain code only after the app is approved, those are not new ideas, but just to give you some ideas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use remote code (which is not allowed by itself, except for JavaScript), React Native or a custom JS bridge is your friend&lt;/li&gt;
  &lt;li&gt;Use the iTunes search API to compare the current version number with the App Store version number (&lt;a href=&quot;https://itunes.apple.com/lookup?bundleId=com.Facebook.Facebook&quot;&gt;example request&lt;/a&gt;), this way the app can automatically enable malicious code after it got approved.&lt;/li&gt;
  &lt;li&gt;Use a remote configuration tool to enable a feature only after an app is approved by Apple&lt;/li&gt;
  &lt;li&gt;Use a time-based trigger: just skip running certain code for the first week after submitting the binary, meaning the code will only run once the app is either approved or rejected.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.theverge.com/2017/4/23/15399438/apple-uber-app-store-fingerprint-program-tim-cook-travis-kalanick&quot;&gt;Pull an Uber and don‚Äôt run certain code when the location is near Cupertino&lt;/a&gt;¬†(it‚Äôs probably fixed by Apple by now)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The things above is public knowledge, most iOS developers are aware, and I strongly advise against using any of this, Apple will eventually catch you and block your account.&lt;/p&gt;

&lt;p&gt;The point of this list is: While the review process provides a basic safety filter, organisations with bad intent will always find a way to somehow work around the limitations of a platform.&lt;/p&gt;

&lt;h3 id=&quot;phishing-on-mobile-is-that-a-thing-now&quot;&gt;Phishing on mobile? Is that a thing now?&lt;/h3&gt;

&lt;p&gt;This area will become more and more relevant, with users being uninformed, and the mobile operating systems not yet clearly separating system UI and app UI. This is kind of related to 
&lt;a href=&quot;https://github.com/KrauseFx/detect.location&quot;&gt;detect.location&lt;/a&gt;, where apps would write their own, custom image picker to provide a better ‚Äúexperience‚Äù, but in reality, with that, they also get full access to your image library, and optionally also your camera (related to 
&lt;a href=&quot;https://github.com/KrauseFx/watch.user&quot;&gt;watch.user&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;iOS should very clearly distinguish between system UI and app UI elements, so that ideally it‚Äôs even obvious for the average smartphone user that something seems off. This is a tricky problem to solve, and web browser are still tackling it, you still have websites that make popups look like macOS / iOS popups, so that many users think it‚Äôs a system message.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59dca2ebf14aa1f26de959f6_1507631870942__img.jpg_&quot; align=&quot;right&quot; width=&quot;250&quot; class=&quot;inline-img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;but-but-but-why-is-the-symbol-within-the--is-this-all-fake&quot;&gt;But, but, but, why is the .¬†symbol within the ‚Äú, is this all fake?&lt;/h3&gt;

&lt;p&gt;Nope, actually, that‚Äôs how the system dialog looks like, the .¬†is within the ‚Äústring notation, so I designed the phishing dialog to also include the same style.&lt;/p&gt;

&lt;h2 id=&quot;similar-projects-i-worked-on&quot;&gt;Similar projects I worked on¬†&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/KrauseFx/whats-the-user-doing&quot;&gt;what‚Äôs the user doing&lt;/a&gt;:¬†Raising awareness of what you can do with a smartphones gyro sensors in web browsers&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/krausefx/detect.location&quot;&gt;detect.location&lt;/a&gt;:¬†An easy way to access the user‚Äôs iOS location data without actually having access&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style=&quot;text-align: center; font-size: 40px;&quot;&gt;
  &lt;a href=&quot;https://github.com/KrauseFx/steal.password&quot; target=&quot;_blank&quot; style=&quot;text-decoration: underline;&quot;&gt;
    Open on GitHub
  &lt;/a&gt;
&lt;/h3&gt;</content><author><name></name></author><category term="ios" /><category term="privacy" /><category term="phishing" /><category term="login" /><category term="credentials" /><summary type="html">Do you want the user‚Äôs Apple ID password, to get access to their Apple account, or to try the same email/password combination on different web services? Just ask your users politely, they‚Äôll probably just hand over their credentials, as they‚Äôre trained to do so üëå</summary></entry><entry><title type="html">iOS Privacy: detect.location - An easy way to access the user‚Äôs iOS location data without actually having access</title><link href="https://krausefx.github.io/krausefx.com//blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access" rel="alternate" type="text/html" title="iOS Privacy: detect.location - An easy way to access the user's iOS location data without actually having access" /><published>2017-10-09T00:00:00+00:00</published><updated>2017-10-09T00:00:00+00:00</updated><id>https://krausefx.github.io/krausefx.com//blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access</id><content type="html" xml:base="https://krausefx.github.io/krausefx.com//blog/ios-privacy-detectlocation-an-easy-way-to-access-the-users-ios-location-data-without-actually-having-access">&lt;p&gt;Does your iOS app have access to the user‚Äôs image library? Do you want to know your user‚Äôs movements over the last several years, including what cities they‚Äôve visited, which iPhones they‚Äôve owned and how they travel? Do you want all of that data in less a second? Then this project is for you!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59db4461cf81e005db7a2062_1507542261614_Screenshot+2017-10-09+11.40.41.png.41.png_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/squarespace_images/static_545299aae4b0e9514fe30c95_54529a29e4b025a90f45cc50_59db44b8f09ca452b53663ab_1507542252323_Screenshot+2017-10-09+11.40.48.png.48.png_&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To see all the above with &lt;strong&gt;your&lt;/strong&gt;¬†data, download the &lt;a href=&quot;https://itunes.apple.com/us/app/detectlocations/id1288532777?ls=1&amp;amp;mt=8&quot;&gt;DetectLocations app&lt;/a&gt;¬†from the App Store.&lt;/p&gt;

&lt;h2 id=&quot;what-can-you-do-with-detectlocation&quot;&gt;What can you do with detect.location?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Get a history of the cities, countries, and other places a user has visited, as long as they took a picture there&lt;/li&gt;
  &lt;li&gt;Find the user‚Äôs place of work, by figuring out where they are from 9 to 5&lt;/li&gt;
  &lt;li&gt;Get a complete list of the user‚Äôs cameras and photography devices (which iPhones, Android phones, cameras) and how long they used each device&lt;/li&gt;
  &lt;li&gt;Use facial recognization to find out who the user hangs out with and who their partner is. Is the user single?&lt;/li&gt;
  &lt;li&gt;Understand the user‚Äôs background:
    &lt;ul&gt;
      &lt;li&gt;Did the user attend college? If so, which one?&lt;/li&gt;
      &lt;li&gt;Did the user recently move from the suburbs to the city?&lt;/li&gt;
      &lt;li&gt;Does the user spend a lot of time with their family?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;whats-detectlocation&quot;&gt;What‚Äôs detect.location?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The native image picker built into iOS allows app developers to access the &lt;strong&gt;full&lt;/strong&gt;¬†image library, with all its metadata&lt;/li&gt;
  &lt;li&gt;With the raw PHAsset object, which represents a picture or video, you also get access to the image‚Äôs metadata. This includes the location and even the speed at which the user was traveling when the picture was taken.&lt;/li&gt;
  &lt;li&gt;In particular, an app can get the following data:&lt;/li&gt;
  &lt;li&gt;The exact location of each asset&lt;/li&gt;
  &lt;li&gt;The physical speed in which the picture/video was taken (how fast did the camera move)&lt;/li&gt;
  &lt;li&gt;The camera model&lt;/li&gt;
  &lt;li&gt;The exact date + time&lt;/li&gt;
  &lt;li&gt;Other exif image metadata&lt;/li&gt;
  &lt;li&gt;With this information, you can render a route of the user‚Äôs travels, into the past for as long as they‚Äôve had a GPS-enabled camera (like an iPhone, other smartphone, or modern point-and-shoot)&lt;/li&gt;
  &lt;li&gt;You can access all of this metadata without analyzing the 
contents¬†of the image at all&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information about the proposal on how this could be fixed, how the code works and more, check out the GitHub link below.&lt;/p&gt;

&lt;h3 style=&quot;text-align: center; font-size: 40px;&quot;&gt;
  &lt;a href=&quot;https://github.com/krausefx/detect.location&quot; target=&quot;_blank&quot; style=&quot;text-decoration: underline;&quot;&gt;
    Open on GitHub
  &lt;/a&gt;
&lt;/h3&gt;</content><author><name></name></author><category term="ios" /><category term="privacy" /><category term="location" /><category term="images" /><category term="library" /><summary type="html">Does your iOS app have access to the user‚Äôs image library? Do you want to know your user‚Äôs movements over the last several years, including what cities they‚Äôve visited, which iPhones they‚Äôve owned and how they travel? Do you want all of that data in less a second? Then this project is for you! To see all the above with your¬†data, download the DetectLocations app¬†from the App Store.</summary></entry></feed>